x is 3
y is x times 4
#print is a special keyword io function
print x. print y

#verbal operators and their symbolic equivalents
#d is -3 - -4
d is minus 3 minus minus 4
#z is y * x + 12
z is y times x plus 12
#w is y/x
w is y divided by x
#a is w % 6
a is w mod 16
#b is a**2
b is a to the 2
#c is log(100)
c is log 100

if z equals 3 do
    print x
    print y
end. else
    while z >= 3 do print z. z is z minus 1. end
end

if z equals 3
    x is 3.

# named function definitions
def foo do
    return 3
end

x is 3.
print x.
#accessing "global scope"
def glob do
    global x
    x is 4
end
call glob
print x.

#with parameters
def bar with x, y do
    f is call foo
    return f + x + y
    #return call foo + x + y
end

#with default parameter values
def foobar with x, y is 3, z is 4 do
    b is call bar with x
    return b + y + z
    #return (call bar with x) + y + z
end

# anonymous function definitions/function assignment
##NOTE: this is equivalent to "def f with x do ... end"
f is def with x do
    return x times 2
end

#function assignment (with non anonymous function)
f is def fb do end
##NOTE: this assigns the variable "fb" to the value of the anonymous function
##      as well as assigning the variable f to the value of this function

# function calls
fval is call f with 3
print fval

print call foobar with 4, 5

# function closure?
f is foobar with 4
fval is f with 5
print fval

#nested function
def foo with x do
    #doesn't overwrite bar in global scope
    def bar with x, y do
        return x + y
    end
    return call bar with x, 3
end

#class definitions
class dog do
    my bark_type is "woof"

    def dog with name do
        my name is name
    end

    #static methods
    static def summmon do
        print "a dog is summoned"
    end

    def bark do
        print my name + ", " + my bark_type + "!"
    end
end

#object instantiation
adog is new dog with "toby"

#object method calling
call adog's bark
#static class method calling
call dog's summon
#it probably looks all better if you make class names start with capital letter...

#object attribute getting/setting
print adog's name
adog's name is "alex"
call adog's bark

#class inheritance
class doggo extends dog do
    when created with name, type do
        call super with name
        my type is type
    end

    #overwriting methods
    def bark with num do
        print my name
        i is 0
        while i < num do
            print my bark_type
            i++
        end
    end
end

toby is new doggo with "toby", "dragon"
call toby 's bark

#setting class methods/attributes
dog bark is def do
    print "woofers!"
end

#anonymous class?
def foo with className do
    obj is new className with "felix"
    return obj
end

#lmfao
#any ide/whatever for this needs to have do/end bracket match highlighting
call foo with class do when created with name do my name is name end end

class apple do
    static class bar do
        static class cat do
            static class dogg do
                static def fight do
                    print "fight me!!!"
                end
            end
        end
    end
end

call apple's bar's cat's dogg's fight

#static func def's in global scope are equivalent to non static
#(basically just ignore the static if we are not inside a class?)
#otherwise would have to write evaluator or parser to check if we are inside class
